<?php

namespace App\Models;

use Illuminate\Support\Facades\Storage;

/**
 * @property int id
 * @property int tpl_id
 * @property string name
 * @property string code
 * @property string source_code
 * @property array $property
 * @property string description
 */
class Scene extends BaseModel
{
    protected $table = 'scene';

    protected $casts = [
        'property' => 'array'
    ];

    public function mainClass()
    {
        return $this->hasOne(Category::class, 'id', 'main_class_id');
    }

    public function subClass()
    {
        return $this->hasOne(Category::class, 'id', 'sub_class_id');
    }

    public function toArray()
    {
        if (!empty($this->cover)) {
            $this->cover = Storage::disk('scene')->url($this->cover);
        }
        if (!empty($this->music_url)) {
            $this->music_url = Storage::disk('scene')->url($this->music_url);
        }
        if (!empty($this->thumbnail_varchar)) {
            $this->thumbnail_varchar = Storage::disk('scene')->url($this->thumbnail_varchar);
        }
        return parent::toArray(); // TODO: Change the autogenerated stub
    }

    public function toModelArray()
    {
        return parent::toArray();
    }

    public function pageList()
    {
        return $this->hasMany(ScenePage::class, 'scene_id', 'id');
    }

    public function save(array $options = [])
    {
        if (!empty($this->cover)) {
            $this->cover = pathinfo($this->cover, PATHINFO_BASENAME);
        }
        if (!empty($this->music_url)) {
            $this->music_url = pathinfo($this->music_url, PATHINFO_BASENAME);
        }
        if (!empty($this->thumbnail_varchar)) {
            $this->thumbnail_varchar = pathinfo($this->thumbnail_varchar, PATHINFO_BASENAME);
        }
        return parent::save($options); // TODO: Change the autogenerated stub
    }
    
    public function getPropertyAttribute()
    {
        if (!empty($this->attributes['property']) && !is_array($this->attributes['property'])) {
            return json_decode(stripslashes(trim($this->attributes['property'], '"')), true);
        }
    }
}
